#!/usr/bin/env python3
# coding: UTF-8

# Copyright Â© 2017, Robert J. Hansen.
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided
# that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""This script will automatically download the latest set of PGPNET
member keys, import them into your local keyring, and update your
Enigmail pgprules.xml file with a new per-recipient rule for the
group."""

import xml.etree.ElementTree as ET
import logging
import platform
import re
from sys import exit as sysexit
from os import environ, walk, sep, access, R_OK, W_OK
from os.path import isfile, isdir
from xml.dom.minidom import parseString as md_parseString


def setup_logging():
    "Initialize logging for the app."
    formatstr = '%(name)-6s: %(levelname)-8s %(message)s'
    logfile = environ["HOME"] + sep + "update_prr.log"
    logging.basicConfig(level=logging.INFO,
                        format=formatstr,
                        datefmt='%m-%d %H:%M',
                        filename=logfile)
    console = logging.StreamHandler()
    console.setFormatter(logging.Formatter(formatstr))
    logging.getLogger('').addHandler(console)


setup_logging()
del setup_logging

try:
    from gpg import Context, Data
except ImportError:
    logging.fatal("gpg module not installed")
    sysexit(1)

try:
    import requests
except ImportError:
    logging.fatal("requests module not installed")
    sysexit(1)


def get_profile_dir():
    """Returns the Thunderbird profile dir."""
    logging.info("seeking Thunderbird profile dir")
    profile_dir = None
    if platform.system() == "Darwin":
        basedir = environ["HOME"]
        profile_dir = basedir + "/Library/Thunderbird/Profiles"
    elif platform.system() == "Linux":
        basedir = environ["HOME"]
        for dirname in ["/.thunderbird", "/.mozilla-thunderbird"]:
            if isdir(basedir + dirname):
                profile_dir = basedir + dirname
                break
    elif platform.system() == "Windows":
        basedir = environ["APPDATA"]
        profile_dir = basedir + r"\Thunderbird\Profiles"

    if profile_dir is not None and isdir(profile_dir):
        logging.info("found it at %s", profile_dir)
        return profile_dir
    else:
        logging.fatal("could not find Thunderbird profile dir!")
        sysexit(1)


def find_pgp_rules():
    """Returns the user's pgprules.xml file."""
    paths = []
    logging.info("beginning search for pgprules.xml")

    for (path, _, files) in walk(get_profile_dir()):
        if "pgprules.xml" in files:
            paths.append(path + sep + "pgprules.xml")

    if not paths:
        logging.fatal("no pgprules.xml found -- aborting")
        sysexit(1)
    if len(paths) > 1:
        logging.fatal("multiple pgprules.xml found -- aborting")
        sysexit(1)
    if not isfile(paths[0]):
        logging.fatal("pgprules.xml is not a file -- aborting")
        sysexit(1)
    if not access(paths[0], R_OK | W_OK):
        logging.fatal("no r/w access to pgprules.xml -- aborting")
        sysexit(1)
    logging.info("found at %s", paths[0])
    return paths[0]


def update_keys():
    """Updates a user's GnuPG public keyring."""
    logging.info("retrieving public keys")
    url = "s/bhpqzxcht527ruu/PGPNET.asc?dl=1"
    req = requests.get("https://www.dropbox.com/" + url)
    if req.status_code != 200:
        logging.fatal("error %d returned", req.status_code)
        sysexit(1)
    logging.info("importing into GnuPG")
    try:
        with Context() as ctx:
            with Data(string=req.text) as data:
                ctx.op_import(data)
        logging.info("keys updated okay")
    except:
        logging.fatal("unknown error while importing")


def get_member_keyids():
    """Fetches the key IDs of PGPNET members."""
    logging.info("retrieving public key ids")
    groupline = "^group pgpnet@yahoogroups.com=.*$"
    keyid_re = "^0x[A-Fa-f0-9]{16}$"
    url = "s/j754hlknhot9sk8/Group%20Line.txt?dl=1"
    req = requests.get("https://www.dropbox.com/" + url)
    if req.status_code != 200:
        logging.fatal("error %d returned", req.status_code)
        sysexit(1)
    lines = [X.strip() for X in req.text.split("\n")]
    for line in [X for X in lines if re.match(groupline, X)]:
        splits = line.strip().split("=")[1].split(" ")
        keyids = [X for X in splits if re.match(keyid_re, X)]
        logging.info("found %d key ids", len(keyids))
        return keyids
    logging.fatal("could not find key ids")
    sysexit(1)


def update_pgprules():
    """Updates the Enigmail pgprules.xml file."""
    logging.info("beginning update")

    rulefile = find_pgp_rules()
    update_keys()

    tree = ET.ElementTree(file=rulefile)

    for rule in tree.getroot().findall("pgpRule"):
        if rule.attrib["email"] == "{pgpnet@yahoogroups.com}":
            tree.getroot().remove(rule)

    elem = ET.SubElement(tree.getroot(), "pgpRule")
    elem.attrib["email"] = "{pgpnet@yahoogroups.com}"
    elem.attrib["keyId"] = ", ".join(get_member_keyids())
    elem.attrib["sign"] = "2"
    elem.attrib["encrypt"] = "2"
    elem.attrib["pgpMime"] = "2"
    elem.attrib["negateRule"] = "0"

    logging.info("writing out pgprules.xml")

    rough_str = ET.tostring(tree.getroot(), encoding="unicode")
    reparsed = md_parseString(rough_str)
    pretty_str = reparsed.toprettyxml(indent="  ")

    with open(rulefile, mode="wb") as output:
        output.write(pretty_str.encode("UTF-8"))

    logging.info("completed run")


if __name__ == '__main__':
    update_pgprules()

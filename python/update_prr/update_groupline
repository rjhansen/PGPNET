#!/usr/bin/env python3
# coding: UTF-8

# Copyright Â© 2017, Robert J. Hansen.
#
# Permission to use, copy, modify, and/or distribute this software
# for any purpose with or without fee is hereby granted, provided
# that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

"""This script will automatically download the latest set of PGPNET
member keys, import them into your local keyring, and update your
gpg.conf file with a new group line for the group."""

import logging
import platform
import re
from sys import exit as sysexit
from os import environ, walk, sep, access, R_OK, W_OK
from os.path import isfile, isdir


_CONF_FILE=""


def setup_logging():
    "Initialize logging for the app."
    formatstr = '%(name)-6s: %(levelname)-8s %(message)s'
    logfile = environ["HOME"] + sep + "update_prr.log"
    logging.basicConfig(level=logging.INFO,
                        format=formatstr,
                        datefmt='%m-%d %H:%M',
                        filename=logfile)
    console = logging.StreamHandler()
    console.setFormatter(logging.Formatter(formatstr))
    logging.getLogger('').addHandler(console)


setup_logging()
del setup_logging

try:
    from gpg import Context, Data
except ImportError:
    logging.fatal("gpg module not installed")
    sysexit(1)

try:
    import requests
except ImportError:
    logging.fatal("requests module not installed")
    sysexit(1)


def find_gpg_conf():
    """Returns the user's gpg.conf file."""
    global _CONF_FILE

    if isfile(_CONF_FILE):
        return _CONF_FILE

    path = sep.join([environ["HOME"], ".gnupg", "gpg.conf"])
    logging.info("beginning search for gpg.conf")

    try:
        with open(path, encoding="UTF-8") as fh:
            _CONF_FILE = path
            logging.info("found it")
            return path
    except:
        logging.fatal("could not find gpg.conf!")
        sysexit(1)


def update_keys():
    """Updates a user's GnuPG public keyring."""
    logging.info("retrieving public keys")
    url = "s/2tu23r92h8taock/PGPNET%40groups.io.asc?dl=1"
    req = requests.get("https://www.dropbox.com/" + url)
    if req.status_code != 200:
        logging.fatal("error %d returned", req.status_code)
        sysexit(1)
    logging.info("importing into GnuPG")
    try:
        with Context() as ctx:
            with Data(string=req.text) as data:
                ctx.op_import(data)
        logging.info("keys updated okay")
    except:
        logging.fatal("unknown error while importing")
        sysexit(1)


def get_member_keyids():
    """Fetches the key IDs of PGPNET members."""
    logging.info("retrieving public key ids")
    groupline = "^group pgpnet@groups.io=.*$"
    keyid_re = "^0x[A-Fa-f0-9]{16}$"
    url = "s/9abn35l2xqeqc04/PGPNET%40groups.io.txt?dl=1"
    req = requests.get("https://www.dropbox.com/" + url)
    if req.status_code != 200:
        logging.fatal("error %d returned", req.status_code)
        sysexit(1)
    lines = [X.strip() for X in req.text.split("\n")]
    for line in [X for X in lines if re.match(groupline, X)]:
        splits = line.strip().split("=")[1].split(" ")
        keyids = [X for X in splits if re.match(keyid_re, X)]
        logging.info("found %d key ids", len(keyids))
        return keyids
    logging.fatal("could not find key ids")
    sysexit(1)


def update_groupline():
    """Updates the gpg.conf file."""
    logging.info("beginning update")
    regex = re.compile(r"^\s*group\s+(<)?pgpnet@groups.io(>)?\s*=.*$")
    update_keys()
    keyids = get_member_keyids()
    with open(find_gpg_conf(), encoding="UTF-8") as fh:
        lines = [X.strip() for X in fh.readlines() if not regex.match(X)]
    with open(find_gpg_conf(), encoding="UTF-8", mode="w") as fh:
        for line in lines:
            print(line, file=fh)
        print("group pgpnet@groups.io=" + " ".join(keyids), file=fh)
        print("group <pgpnet@groups.io>=" + " ".join(keyids), file=fh)
    logging.info("updated gpg.conf")


if __name__ == '__main__':
    update_groupline()
